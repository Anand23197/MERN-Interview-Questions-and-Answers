Q1) What is the Redux working Flow?
Ans:-  

Redux is a predictable state container for JavaScript applications, commonly used with React for managing the state of the application in a more organized and scalable way. The basic flow of Redux can be summarized in the following steps:

1. Store Creation:
---------------------
    Create a Redux store, which is a single source of truth for the state of your application.
    The store holds the complete state tree of your app.

code:-
---------------------
import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(rootReducer);

2)Actions:
--------------------
    Actions are plain JavaScript objects that represent events that can modify the state.
    Actions typically have a type property and can include additional data.

code:-
--------------------
const increment = () => ({
  type: 'INCREMENT',
});


3)reducers
--------------------
    Reducers are pure functions that specify how the application's state changes in response to actions.
    A reducer takes the current state and an action as arguments and returns a new state.

code:-
--------
const counterReducer = (state = 0, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1;
    default:
      return state;
  }
};

4)Dispatching Actions
--------------------
    Use the store.dispatch method to dispatch actions to the store.
    Dispatching an action triggers the reducer, which updates the state based on the action.

code:-
---------
store.dispatch(increment());

5.)Subscribing to the store
--------------------
    Subscribe to the store to be notified of state changes.
    This is often used to update the UI in response to changes in the state.

code:-
---------
store.subscribe(() => {
  console.log('State updated:', store.getState());
});

6)Selectors:
--------------------
    Selectors are functions that extract specific pieces of data from the state.
    They help in accessing the state in a more structured way.

code:-
---------
const selectCounter = (state) => state.counter;

7) Connecting with UI (React, for example):
-------------------------------------------

    Use a library like react-redux to connect your React components to the Redux store.
    This is typically done using the connect function or hooks like useDispatch and useSelector.

code:-
---------

import { useSelector, useDispatch } from 'react-redux';

const CounterComponent = () => {
  const counter = useSelector(selectCounter);
  const dispatch = useDispatch();

  return (
    <div>
      <p>Counter: {counter}</p>
      <button onClick={() => dispatch(increment())}>Increment</button>
    </div>
  );
};


 This summarizes the basic flow of working with Redux in a React application. Actions trigger changes,
 reducers specify how the state changes, the store holds the state, and components can connect to the 
 store to update and access the state.