Q1) How to handle Failure in microservices?
And:-  Handling failures in a microservices architecture is critical because services are distributed and interdependent. 
Here's how you can handle failures effectively:

✅ 1. Retries with Backoff
If a dependent service fails temporarily, retry the request after a delay.

->  Exponential backoff: Increase the delay after each retry.
->  Use libraries like Resilience4j (Java), Polly (.NET), or custom retry logic.
⚠️ Avoid aggressive retry loops—they can overload the system.

✅ 2. Circuit Breaker Pattern
Stops calling a failing service after a threshold and gives it time to recover.
->  Implement with:
        Resilience4j (Java)
        Hystrix (deprecated)
        Polly (.NET)

Prevent cascading failures by stopping requests to a failing service for a specified time.
The circuit breaker has three states:
    Closed: Requests are allowed as normal.
    Open: Requests are blocked after multiple failures.
    Half-Open: Limited requests are allowed to check if the service has recovered.


✅ 3. Timeouts
->  Always set a timeout for external service calls.
->  Prevents a slow service from holding up others.
->  Example: HTTP client timeout = 3 seconds.


✅ 4. Fallbacks
Provide alternative logic when a service is down.
->  Return cached data, defaults, or a simple message:
    “Service temporarily unavailable. Please try again later.”

✅ 5. Asynchronous Communication:
->  Use message queues (e.g., RabbitMQ, Kafka) for communication.
->  This decouples services and allows them to handle failures independently.
->  Failed messages can be retried or placed in a dead-letter queue.

✅ 6. Health Checks and Self-Healing
Use tools like Kubernetes or ECS to:
->  Automatically restart failed containers.
->  Use liveness and readiness probes.

✅ 8. Centralized Logging & Monitoring
Use observability tools:
->  ELK Stack / OpenSearch
->  Prometheus + Grafana
->  Jaeger / Zipkin for tracing
->  Detect issues before they become critical.

✅ 9. Rate Limiting:
->  Limit the number of requests to a service to prevent overloading.
->  This can protect services from excessive traffic during failures.

✅ 10. Bulkhead Pattern
Isolate parts of the system so failure in one doesn't crash others.
Example: Use separate thread pools or service partitions.

Q2) what is communication message queue in microservices? 
Ans:- In a microservices architecture, services often need to communicate with each other. There are two main
communication styles:

Synchronous (e.g., REST APIs, gRPC)
Asynchronous (e.g., Message Queues)

📨 Message Queue in Microservices Communication
Message Queue enables asynchronous communication, where a producer sends a message to a queue, and one or more consumers 
read from it. This helps decouple services.

✅ Benefits of Using a Message Queue
---------------------------------------
->  Loose Coupling: Services don't need to know about each other.

->  Scalability: Consumers can scale independently.

->  Fault Tolerance: If a consumer is down, messages stay in the queue.

->  Buffering: Handles traffic spikes better.

->  Retry Mechanism: Failed messages can be retried or sent to a Dead Letter Queue.

🏗️ Common Message Queues
-----------------------------------
| Tool              | Protocol/Type       | Best For                         |
| ----------------- | ------------------- | -------------------------------- |
| **RabbitMQ**      | AMQP                | Complex routing, acknowledgments |
| **Apache Kafka**  | Pub/Sub, Log-based  | High-throughput, event streaming |
| **Amazon SQS**    | Managed Queue       | Serverless AWS-based apps        |
| **Redis Streams** | Lightweight MQ      | Simple, fast use-cases           |
| **NATS**          | Lightweight Pub/Sub | Low latency systems              |

🔁 Example: Communication Flow Using RabbitMQ
Actors:
->  Order Service → Publishes "OrderCreated" event
->  Inventory Service → Listens to "OrderCreated" and updates stock
->  Notification Service → Listens to "OrderCreated" and sends email

Workflow:
1.  Order Service sends message:
    { "orderId": 123, "item": "iPhone", "qty": 1 }
2.  Message goes to OrderExchange
3.  Inventory and Notification services consume the message

🔧 Message Structure
------------------------------------
{
  "event": "OrderCreated",
  "data": {
    "orderId": "1234",
    "customerId": "5678",
    "items": [
      { "productId": "p01", "quantity": 2 }
    ]
  },
  "timestamp": "2025-06-12T09:00:00Z"
}
------------------------------------

🔒 Things to Consider
Idempotency: Ensure the same message doesn't cause duplicate actions.
Message Ordering: Use Kafka partitions if order matters.
Dead Letter Queue (DLQ): Store failed messages for retry/debug.
Message Acknowledgment: Needed in RabbitMQ to avoid loss.

Q3) Java 8 feature?
Ans:- To utilize functional programming benefits in Java, java 8 come.

Features of java 8
------------------------

1. lambda expression
Enables functional-style programming by writing anonymous functions.
✅ Syntax:
-----------
(parameters) -> expression

example
------------
List<String> list = Arrays.asList("A", "B", "C");
list.forEach(item -> System.out.println(item));

2. Functional Interfaces
An interface with exactly one abstract method, used with lambda expressions.

✅ Example:
-----------------------
@FunctionalInterface
interface MyFunction {
    void apply(String s);
}
-----------------------

🔸 Java provides built-in functional interfaces in java.util.function, like:

->  Predicate<T>
->  Function<T, R>
->  Consumer<T>
->  Supplier<T>
->  BiFunction<T, U, R>

3. Stream API
For processing collections functionally and efficiently.

🔸 Example:
-----------------------------------------------
List<String> names = List.of("Anand", "Amit", "Neha");
List<String> filtered = names.stream()
    .filter(n -> n.startsWith("A"))
    .collect(Collectors.toList());
-----------------------------------------------

4. Date and Time API (java.time)
A modern replacement for Date, Calendar.

🔸 Example:
-------------------------------------
LocalDate today = LocalDate.now();
LocalTime time = LocalTime.now();
LocalDateTime dt = LocalDateTime.now();
-------------------------------------


5. Default Methods in Interfaces
Allows concrete methods in interfaces.

🔸 Example:
--------------------------------------
interface Vehicle {
    default void start() {
        System.out.println("Vehicle started");
    }
}
--------------------------------------




4) What is functional interface?
Ans :- A functional interface in Java is an interface that contains only one abstract method. Functional interfaces 
can have multiple default or static methods, but only one abstract method.
We can invoke lambda expression by using functional interface.

example
-----------------
public interface MyInterface{
    public void sayHello(); //only one abstract method;
}  

or

public interface MyInterface{
    public void sayHello(); //only one abstract method;

    default void sayBye(){

    }

    public static void sayOk(){

    }
}  

@FunctionalInterface Annotation:
While not mandatory, it's good practice to use the @FunctionalInterface annotation to mark an interface as functional.
This annotation helps the compiler catch errors if you accidentally add more than one abstract method.

Q5) What is stream api in java?
Ans:- The Java Stream API (introduced in Java 8) allows you to process collections of objects functionally and 
declaratively—using a pipeline of operations like filter, map, reduce, etc. It's part of the java.util.stream package.

✅ Key Features
->  No Storage
->  Pipeline of Functions
->  Laziness
->  Can be infinite
->  Can be parallelized
->  Can be created from collections, arrays, Files Lines, Methods in Stream, IntStream etc.

🧠 Stream Operations
| Type             | Method Examples                                 |
| ---------------- | ----------------------------------------------- |
| **Intermediate** | `filter()`, `map()`, `sorted()`, `distinct()`   |
| **Terminal**     | `collect()`, `forEach()`, `reduce()`, `count()` |

🟢Characteristics of Intermediate Operations
->  Methods are chained together.
->  Intermediate operations transform a stream into another stream.
->  It enables the concept of filtering where one method filters data and passes it to another method after processing.

Important Intermediate Operations
There are a few Intermediate Operations mentioned below:

1. map(): The map method is used to return a stream consisting of the results of applying the given function to the elements of this stream.

Syntax:

<R> Stream<R> map(Function<? super T, ? extends R> mapper)

2. filter(): The filter method is used to select elements as per the Predicate passed as an argument.

Syntax:

Stream<T> filter(Predicate<? super T> predicate)

3. sorted(): The sorted method is used to sort the stream.

Syntax:

Stream<T> sorted()
Stream<T> sorted(Comparator<? super T> comparator)

4. flatMap(): The flatMap operation in Java Streams is used to flatten a stream of collections into a single stream of elements.

Syntax:

<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)

5. distinct(): Removes duplicate elements. It returns a stream consisting of the distinct elements (according to Object.equals(Object)).

Syntax:

Stream<T> distinct()


Terminal Operations
Terminal Operations are the type of Operations that return the result. These Operations are not processed further just return a final result value.

Important Terminal Operations
There are a few Terminal Operations mentioned below:

1. collect(): The collect method is used to return the result of the intermediate operations performed on the stream.

Syntax:

<R, A> R collect(Collector<? super T, A, R> collector)

2. forEach(): The forEach method is used to iterate through every element of the stream.

Syntax:

void forEach(Consumer<? super T> action)

3. reduce(): The reduce method is used to reduce the elements of a stream to a single value. The reduce method takes a BinaryOperator as a parameter.

Syntax:

T reduce(T identity, BinaryOperator<T> accumulator)
Optional<T> reduce(BinaryOperator<T> accumulator)

4. count(): Returns the count of elements in the stream.

Syntax:

long count()

5. findFirst(): Returns the first element of the stream, if present.

Syntax:

Optional<T> findFirst()

6. allMatch(): Checks if all elements of the stream match a given predicate.

Syntax:

boolean allMatch(Predicate<? super T> predicate)

7. anyMatch(): Checks if any element of the stream matches a given predicate.

Syntax:

boolean anyMatch(Predicate<? super T> predicate)

Q6) What is lambda expression?
Ans:- Lambda expression is an anonymous function 
i.e.,
    1) Not having any name.
    2) Not having any return type 
    3) Not having modifier 

🟢 Steps to make any function lambda expression
    1. remove modifier 
    2. remove return type 
    3. remove method name 
    4. place arrow 

eg:- 
-----------------------------
private void sayHello(){
    System.out.println("Hello World");
}

after converting into lambda expression

()->{System.out.println("hello world")}
or 
()-> System.out.println("hello world")
------------------------------

🟢Benifits of Lambda expression
---------------------------------
 1. To enable functional programming in java 
 2. To make code more readable, maintainable and concise code 
 3. To enable parallel processing 
 4. JAR file size reduction 
 5. Elimination of shadow variables 

 Q7) What is default methods in interface ? 
 ans->  Before Java 8, interfaces could only have abstract methods. The implementation of these methods has 
 to be provided in a separate class. So, if a new method is to be added in an interface, then its implementation 
 code has to be provided in the class implementing the same interface. To overcome this issue, Java 8 has introduced
 the concept of default(concrete) methods which allow the interfaces to have methods with implementation without affecting the 
 classes that implement the interface.

example 
----------------------------------------------------------
// A simple program to Test Interface default
// methods in java
interface TestInterface
{
    // abstract method
    public void square(int a);

    // default method
    default void show()
    {
      System.out.println("Default Method Executed");
    }
}

class TestClass implements TestInterface
{
    // implementation of square abstract method
    public void square(int a)
    {
        System.out.println(a*a);
    }

    public static void main(String args[])
    {
        TestClass d = new TestClass();
        d.square(4);

        // default method executed
        d.show();
    }
}
-------------------------------------------------------

Q8) static methods in interface ? 
Ans:- Static Methods in Interface are those methods, which are defined in the interface with the keyword static. 
Unlike other methods in Interface, these static methods contain the complete definition of the function and since
the definition is complete and the method is static, therefore these methods cannot be overridden or changed in the 
implementation class.

example:
------------------------
// Java program to demonstrate
// static method in Interface.

interface NewInterface {

    // static method
    static void hello()
    {
        System.out.println("Hello, New Static Method Here");
    }

    // Public and abstract method of Interface
    void overrideMethod(String str);
}

// Implementation Class
public class InterfaceDemo implements NewInterface {

    public static void main(String[] args)
    {
        InterfaceDemo interfaceDemo = new InterfaceDemo();

        // Calling the static method of interface
        NewInterface.hello();

        // Calling the abstract method of interface
        interfaceDemo.overrideMethod("Hello, Override Method here");
    }

    // Implementing interface method

    @Override
    public void overrideMethod(String str)
    {
        System.out.println(str);
    }
}
----------------------------------------------------

Q9) Basic bulding block of microservice architecture? 
Ans:- Microservices architecture is a distributed server-side architecture based on loosely coupled 
services that are designed, developed, packaged, build, tested, deployed and scaled independently. 
The twelve-factor app is a methodology which nicely complements and helps to leverage the value of 
microservices architecture.

Service Discovery
Load Balancer
API Gateway
Service Registry
Circuit Breaker
Service Monitoring
Service Orchestration
Configuration Server

1. Service registration and discovery
Services need to find each other. They also have location transparency in a distributed architecture where services with 
short life cycles can reside in different containers/virtual machines/bare metals with continuously changing IP addresses. 
Service registration and discovery component allow services to register themselves by bootstrapping during start-up. 
They are found by other services and also find other services through the discovery server.
eg:-
Hashicorp Consul, Netflix Eureka, Etcd are few of the examples of service registration and discovery servers.

2. Load Balancer 
A load balancer distributes network traffic across multiple servers to ensure no single server is overwhelmed, 
optimizing resource utilization, maximizing throughput, minimizing response time, and ensuring high availability. 
It acts as a single point of contact for clients, directing requests to healthy servers in a pool. 
Distributes client requests across multiple service instances. Ensures reliability and scalability
eg: nginx, aws elastic load balancer 

3. API Gateway 
An API gateway acts as a single entry point for all client requests to backend services, providing a centralized point for 
managing and routing API calls. It simplifies interactions between clients and multiple microservices or backend systems by 
handling tasks like request routing, authentication, authorization, and rate limiting. 
eg: Apigee, Amazon API Gateway 

4. Circuit Breaker 
The Circuit Breaker pattern is a design pattern used in microservices to enhance system resilience and fault tolerance.
It acts as a protective mechanism to prevent cascading failures.
eg: resilience4j 

5. Service Monitoring & Logging
Microservices monitoring involves tracking the health and performance of individual, independently deployable services
within a microservices architecture. It's crucial for ensuring availability, identifying bottlenecks, and troubleshooting 
issues across a distributed system. 

Key aspects of microservices monitoring:
------------------------------------------
Metrics, Logging, Tracing, Alerting 

Tools for microservices monitoring:
---------------------------------
Prometheus: An open-source monitoring system and alerting toolkit. 
Grafana: A platform for visualizing and analyzing time series data, often used with Prometheus. 
Jaeger/Zipkin: Open-source distributed tracing systems. 
Dynatrace: An all-in-one platform for monitoring microservices, offering auto-discovery and AI-powered insights. 
ELK stack (Elasticsearch, Logstash, Kibana): A popular open-source solution for log management and analysis. 
CloudWatch: Amazon's monitoring service for AWS resources, including microservices deployed on AWS. 

6. Containerization & Orchestration
Packages microservices for consistency and portability.
Uses Docker containers and orchestration tools like Kubernetes.

7. Configuration Server
A configuration server in microservices provides a centralized location to manage and distribute configuration 
data for all microservices in a distributed environment. This eliminates the need for individual configuration 
files in each service, streamlining management and reducing deployment complexities. 

Centralized configuration management.
Enables dynamic configuration updates without redeployment.
Examples: Spring Cloud Config.

Q10) Finally block ? 
Ans:- The finally block is used in exception handling to execute important code regardless of whether an exception is thrown or not.
you can implement finally block without catch block. 
    try {
            return 1;
        } finally {
            System.out.println("Finally always runs");
        }


Q11) Errors vs Exception in java ? 
ans : - 
🟢In Java, errors and exceptions are both types of throwable objects, but they represent different types of 
problems that can occur during the execution of a program.
Errors are usually caused by serious problems that are outside the control of the program, such as running out of 
memory or a system crash. Errors are represented by the Error class and its subclasses. Some common examples of 
errors in Java include:

OutOfMemoryError: Thrown when the Java Virtual Machine (JVM) runs out of memory.
StackOverflowError: Thrown when the call stack overflows due to too many method invocations.
NoClassDefFoundError: Thrown when a required class cannot be found.
Since errors are generally caused by problems that cannot be recovered from, it's usually not appropriate for a program to catch errors. Instead, the best course of action is usually to log the error and exit the program.

🟢Exceptions, on the other hand, are used to handle errors that can be recovered from within the program. 
Exceptions are represented by the Exception class and its subclasses. Some common examples of exceptions in Java include:

NullPointerException: Thrown when a null reference is accessed.
IllegalArgumentException: Thrown when an illegal argument is passed to a method.
IOException: Thrown when an I/O operation fails.

Since exceptions can be caught and handled within a program, it's common to include code to catch and handle exceptions 
in Java programs. By handling exceptions, you can provide more informative error messages to users and prevent the program 
from crashing
In summary, errors and exceptions represent different types of problems that can occur during program execution. Errors are
usually caused by serious problems that cannot be recovered from, while exceptions are used to handle recoverable errors 
within a program.

In java, both Errors and Exceptions are the subclasses of java.lang.Throwable class. Error refers to an illegal operation
performed by the user which results in the abnormal working of the program. Programming errors often remain undetected until 
the program is compiled or executed. Some of the errors inhibit the program from getting compiled or executed. Thus errors 
should be removed before compiling and executing. It is of three types:

Compile-time
Run-time
Logical

✅ 1. Compile-Time Error
📌 What is it?
An error detected by the compiler before the program runs.

Caused by syntax issues, type mismatches, missing imports, etc.
🧠 Examples:
int x = "abc";   // ❌ Type mismatch
int y = ;        // ❌ Syntax error
System.out.println(msg); // ❌ Variable 'msg' not declared

🛠️ Fix:
Correct the code so the compiler can successfully build the program.


✅ 2. Run-Time Error
📌 What is it?
An error that occurs while the program is running.

Program compiles fine but crashes or behaves unexpectedly during execution.

🧠 Examples:
int a = 10 / 0;               // ❌ ArithmeticException
String s = null;
System.out.println(s.length()); // ❌ NullPointerException

int[] arr = new int[3];
System.out.println(arr[5]);  // ❌ ArrayIndexOutOfBoundsException

🛠️ Fix:
Use try-catch blocks and proper validation to handle exceptions safely.

✅ 3. Logical Error
📌 What is it?
The program runs successfully without crashing, but the output is wrong due to a mistake in logic.

The hardest to detect — no error messages! 
🧠 Examples:
// Intention: multiply numbers
int a = 5;
int b = 4;
int result = a + b;  // ❌ Logic mistake (used + instead of *)

System.out.println("Product is: " + result); // Output: 9 (should be 20)

🛠️ Fix:
Requires debugging, testing, and careful thinking about the algorithm.


12) Immutable class in java ? 
Ans:- 
An immutable class is a class whose objects cannot be modified after creation. 
It ensures thread safety, consistency, and safe sharing.

🔐 Rules to Create an Immutable Class
->  The class must be declared as final so that child classes cannot be created.
->  Data members in the class must be declared private so that direct access is not allowed.
->  Data members in the class must be declared as final so that we can’t change their value after object creation.
->  A parameterized constructor should initialize all the fields, performing a deep copy so that data members can't be 
    modified with an object reference.
->  Deep Copy of objects should be performed in the getter methods to return a copy rather than returning the actual object reference.

Note: There should be no setters or in simpler terms, there should be no option to change the value of the instance variable.

🔷 Example: Immutable Person Class
------------------------------------------ 
// Java Program to Create An Immutable Class
import java.util.HashMap;
import java.util.Map;

// declare the class as final
final class Student {

    // make fields private and final
    private final String name;
    private final int regNo;
    private final Map<String, String> metadata;

    // initialize all fields via constructor
    public Student(String name, int regNo, Map<String, String> metadata) {
        this.name = name;
        this.regNo = regNo;

        // deep copy of mutable object (Map)
        Map<String, String> tempMap = new HashMap<>();
        for (Map.Entry<String, String> entry : metadata.entrySet()) {
            tempMap.put(entry.getKey(), entry.getValue());
        }
        this.metadata = tempMap;
    }

    // only provide getters (no setters)
    public String getName() {
        return name;
    }

    public int getRegNo() {
        return regNo;
    }

    // return deep copy to avoid exposing internal state
    public Map<String, String> getMetadata() {
        Map<String, String> tempMap = new HashMap<>();
        for (Map.Entry<String, String> entry : this.metadata.entrySet()) {
            tempMap.put(entry.getKey(), entry.getValue());
        }
        return tempMap;
    }
}






import java.util.HashMap;
import java.util.Map;

public class Geeks {
    public static void main(String[] args) {

        // create a map and adding data
        Map<String, String> map = new HashMap<>();
        map.put("1", "first");
        map.put("2", "second");

        // create an immutable Student object
        Student s = new Student("GFG", 101, map);

        // accessing data
        System.out.println(s.getName());       
        System.out.println(s.getRegNo());     
        System.out.println(s.getMetadata());   

        // try to modify the original map
        map.put("3", "third");
        System.out.println(s.getMetadata());   

        // try to modify the map returned by getMetadata()
        s.getMetadata().put("4", "fourth");
        System.out.println(s.getMetadata());   
    }
}
-----------------------------------------

✅ Benefits of Immutability
-------------------------------------------
Thread-safe (no need to synchronize).
Safe to cache or reuse.
Helps in functional programming.
Used in

Q13) Diffrent ways to create object in java ? 
Ans:- 
🟢List of Methods to Create Objects in Java
Using new keyword
Using clone() method
Using Deserialization
Using Constructor.newInstance() from Reflection API

a) Using new keyword 
----------------------
class GFG {

    // Declaring and initializing string
    // Custom input string
    String name = "GeeksForGeeks";

    // Main driver method
    public static void main(String[] args)
    {
        // As usual and most generic used we will
        // be creating object of class inside main()
        // using new keyword
        GFG obj = new GFG();

        // Print and display the object
        System.out.println(obj.name);
    }
}
----------------------------------------

b) : Using clone() Method
-----------------------------
class GFG implements Cloneable {

    // Instance variable
    String name = "GeeksForGeeks";

    // Overriding the clone() method from Object class
    @Override
    protected Object clone()
        throws CloneNotSupportedException
    {
        return super
        // Calls Object class's clone() method
            .clone(); 
    }

    // Main method
    public static void main(String[] args)
    {
        try {
            // Creating the first object
            GFG obj1 = new GFG();

            // Creating a clone (copy) of obj1
            GFG obj2 = (GFG)obj1.clone();

            // Printing the value of name from the cloned
            // object
            System.out.println(obj2.name);
        }
        catch (CloneNotSupportedException e) {
            // Handling exception if cloning is not
            // supported
            e.printStackTrace();
        }
    }
}
-------------------------------------------------

c: Using Deserialization
---------------------------------------
import java.io.*;

// Class GFG implements Serializable to allow object serialization
class GFG implements Serializable {

    String name;

    GFG(String name) {
        this.name = name;
    }

    // Method to serialize the object
    public static void serialize() {
        try {
            GFG obj = new GFG("GeeksForGeeks");
            FileOutputStream fos = new FileOutputStream("file.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(obj);
            oos.close();
            fos.close();
            System.out.println("Object has been serialized");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to deserialize the object
    public static void deserialize() {
        try {
            FileInputStream fis = new FileInputStream("file.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            GFG obj = (GFG) ois.readObject();
            ois.close();
            fis.close();
            System.out.println("Deserialized object name: " + obj.name);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Main method
    public static void main(String[] args) {
        // First serialize the object
        serialize(); 
         // Then deserialize it and print the name
        deserialize();    
    }
}
-----------------------------------------------------

d) Constructor.newInstance() from Reflection API:
--------------------------------------------------
// Importing the Constructor class from java.lang.reflect package
import java.lang.reflect.Constructor;

// Defining the class
class GFG {
    // Private member variable
    private String name;

    // Public no-argument constructor
    public GFG() {}

    // Setter method to assign a value to 'name'
    public void setName(String name) {
        this.name = name;
    }

    // Main method – entry point of the program
    public static void main(String[] args) {
        try {
            // Getting the Constructor object for GFG class (no-arg constructor)
            Constructor<GFG> constructor = GFG.class.getDeclaredConstructor();

            // Making the constructor accessible (useful if it's private)
            constructor.setAccessible(true);

            // Creating a new instance of GFG using the constructor
            GFG obj = constructor.newInstance();

            // Setting the name using the setter method
            obj.setName("GeeksForGeeks");

            // Printing the name to verify object creation
            System.out.println(obj.name);
        } catch (Exception e) {
            // Handling exceptions that may occur during reflection
            e.printStackTrace();
        }
    }
}
------------------------------------------------------