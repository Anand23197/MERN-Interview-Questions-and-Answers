Facade is a structural design pattern.
Facade Method Design Pattern provides a unified interface to a set of interfaces in a subsystem. 
Facade defines a high-level interface that makes the subsystem easier to use. 


ðŸŸ¢When to use Facade Method Design Pattern
---------------------------------------------------
-> A Facade provide a simple default view of the subsystem that is good enough for most clients.
-> There are many dependencies between clients and the implementation classes of an abstraction.
-> A Facade to decouple the subsystem from clients and other subsystems, thereby promoting subsystem independence and portability.
-> Facade define an entry point to each subsystem level. If subsystem are dependent, then you can simplify the dependencies between them by making them communicate with each other through their facades.

1. Facade (Compiler)
-> Facade knows which subsystem classes are responsible for a request.
-> It delegate client requests to appropriate subsystem objects.
2. Subsystem classes (Scanner, Parser, ProgramNode, etc.)
-> It implement subsystem functionality.
-> It handle work assigned by the Facade object.
-> It have no knowledge of the facade; that is, they keep no references to it.
3. Interface
-> The Interface in the Facade Design Pattern refers to the set of simplified methods that the facade exposes to the client.
-> It hides the complexities of the subsystem, ensuring that clients interact only with high-level operations, without dealing with the underlying details of the system.

ðŸŸ¢Facade Method Design Pattern collaborate in different way
-----------------------------------------------------------------
-> Client communicate with the subsystem by sending requests to Facade, which forwards them to the appropriate subsystem objects.
-> The Facade may have to do work of its own to translate it inheritance to subsystem interface.
-> Clients that use the Facade don't have to access its subsystem objects directly.

ðŸŸ¢Steps to implement Facade Design Pattern
--------------------------------------------------

Step 1: First, determine the complex subsystems or components that the client needs to interact with.
Step 2: Build a facade class that serves as the middle layer between the client and the subsystems.
        This class should offer simplified methods that wrap the interactions with the subsystems.
Step 3: Expose a clear, high-level interface in the facade class. This interface will include the methods 
        that the client will use, hiding the internal complexity.
Step 4: Inside the facade methods, delegate the requests to the appropriate subsystem classes to perform the actual operations.
Step 5: The client now interacts only with the facade, which manages the underlying calls to the subsystems,
        simplifying the clientâ€™s experience.

ðŸŸ¢Use Case: Home Theater System
------------------------------------
We want to simplify the usage of a complex system of subsystems: DVDPlayer, Projector, and Amplifier.

âœ… 1. Subsystems
--------------------------------
// DVD Player
public class DVDPlayer {
    public void on() {
        System.out.println("DVD Player ON");
    }

    public void play(String movie) {
        System.out.println("Playing movie: " + movie);
    }

    public void off() {
        System.out.println("DVD Player OFF");
    }
}

// Projector
public class Projector {
    public void on() {
        System.out.println("Projector ON");
    }

    public void off() {
        System.out.println("Projector OFF");
    }
}

// Amplifier
public class Amplifier {
    public void on() {
        System.out.println("Amplifier ON");
    }

    public void setVolume(int level) {
        System.out.println("Setting volume to: " + level);
    }

    public void off() {
        System.out.println("Amplifier OFF");
    }
}

âœ… 2. Facade Class
-----------------------------
public class HomeTheaterFacade {
    private DVDPlayer dvdPlayer;
    private Projector projector;
    private Amplifier amplifier;

    public HomeTheaterFacade(DVDPlayer dvd, Projector projector, Amplifier amplifier) {
        this.dvdPlayer = dvd;
        this.projector = projector;
        this.amplifier = amplifier;
    }

    public void watchMovie(String movie) {
        System.out.println("Get ready to watch a movie...");
        projector.on();
        amplifier.on();
        amplifier.setVolume(5);
        dvdPlayer.on();
        dvdPlayer.play(movie);
    }

    public void endMovie() {
        System.out.println("Shutting movie theater down...");
        dvdPlayer.off();
        amplifier.off();
        projector.off();
    }
}


âœ… 3. Client Code (Usage)
------------------------------
public class Main {
    public static void main(String[] args) {
        DVDPlayer dvd = new DVDPlayer();
        Projector projector = new Projector();
        Amplifier amplifier = new Amplifier();

        HomeTheaterFacade homeTheater = new HomeTheaterFacade(dvd, projector, amplifier);

        homeTheater.watchMovie("Inception");
        System.out.println();
        homeTheater.endMovie();
    }
}


âœ… Output
-----------------
Get ready to watch a movie...
Projector ON
Amplifier ON
Setting volume to: 5
DVD Player ON
Playing movie: Inception

Shutting movie theater down...
DVD Player OFF
Amplifier OFF
Projector OFF

ðŸŽ¯ Explanation
Subsystems have their own operations and complexity.
HomeTheaterFacade simplifies the interaction by exposing a clean interface (watchMovie() and endMovie()).
This encapsulates the complexity and improves readability, usability, and maintenance.


ðŸŸ¢Use Cases of Facade Method Design Pattern
------------------------------------------------
Simplifying Complex External Systems:
->  A facade encapsulates database connection, query execution, and result processing, offering a clean interface to the application.
->  A facade simplifies the usage of external APIs by hiding the complexities of authentication, request formatting, and response parsing.

Layering Subsystems:
->  Facades define clear boundaries between subsystems, reducing dependencies and promoting modularity.
->  Facades offer simplified interfaces to lower-level subsystems, making them easier to understand and use.

Providing a Unified Interface to Diverse Systems:
->  A facade can combine multiple APIs into a single interface, streamlining interactions and reducing code duplication.
->  A facade can create a modern interface for older, less accessible systems, facilitating their integration with newer components.

Protecting Clients from Unstable Systems:
->  Facades minimize the impact of changes to underlying systems by maintaining a stable interface.
->  Facades can protect clients from changes or issues in external libraries or services.


ðŸŸ¢Advantages of Facade Method Design Pattern
--------------------------------------------------
Simplified Interface:
->  Simplifies the use and understanding of a complex system by offering a clear and concise interface.
->  Hides the internal details of the system, reducing cognitive load for clients.

Reduced Coupling:
->  Clients become less reliant on the internal workings of the underlying system when they are disconnected from it.
->  Encourages the reusability and modularity of code components.
->  Allows for the independent testing and development of various system components.

Encapsulation:
->  Encapsulates the complex interactions within a subsystem, protecting clients from changes in its implementation.
->  Allows for changes to the subsystem without affecting clients, as long as the facade interface remains stable.

Improved Maintainability:
->  Easier to change or extend the underlying system without affecting clients, as long as the facade interface remains consistent.
->  Allows for refactoring and optimization of the subsystem without impacting client code.

ðŸŸ¢Disadvantages of Facade Method Design Pattern
---------------------------------------------
Increased Complexity:
->  Adding the facade layer in the system increases the level of abstraction.
->  Because of this, the code may be more difficult to understand and debug

Reduced Flexibility:
->  The facade acts as a single point of access to the underlying system.
->  This can limit the flexibility for clients who need to bypass the facade or access specific functionalities 
    hidden within the subsystem.

Overengineering:
->  Applying the facade pattern to very simple systems can be overkill, adding unnecessary complexity where it's not needed.
->  Consider the cost-benefit trade-off before implementing a facade for every situation.

Potential Performance Overhead:
->  Adding an extra layer of indirection through the facade can introduce a slight performance overhead, especially for frequently used operations.
->  This may not be significant for most applications, but it's worth considering in performance-critical scenarios.

Conclusion
The facade pattern is appropriate when you have a complex system that you want to expose to clients in a simplified way,
or you want to make an external communication layer over an existing system that is incompatible with the system. 
Facade deals with interfaces, not implementation. Its purpose is to hide internal complexity behind a single interface 
that appears simple on the outside. 
