The Decorator Design Pattern is a structural design pattern used in software development. It allows behavior 
to be added to individual objects, dynamically, without affecting the behavior of other objects from the same class. 
This pattern is useful when you need to add functionality to objects in a flexible and reusable way.

üü¢Key Components of the Decorator Design Pattern
--------------------------------------------------
Component Interface: 
    This is an abstract class or interface that defines the common interface for both the concrete components and decorators.
    It specifies the operations that can be performed on the objects.
Concrete Component: 
    These are the basic objects or classes that implement the Component interface. They are the objects to which we want to 
    add new behavior or responsibilities.
Decorator: 
    This is an abstract class that also implements the Component interface and has a reference to a Component object. 
    Decorators are responsible for adding new behaviors to the wrapped Component object.
Concrete Decorator: 
    These are the concrete classes that extend the Decorator class. They add specific behaviors or responsibilities to 
    the Component. Each Concrete Decorator can add one or more behaviors to the Component.

üéØ Real-World Analogy
-------------------------------------------------
Imagine ordering a coffee. You start with a base coffee and dynamically add decorators like milk, sugar, or chocolate.
Each decorator adds its own cost and description.

1. Component Interface
-------------------------------
public interface Coffee {
    String getDescription();
    double getCost();
}
-------------------------------

2. Concrete Component
------------------------------
public class SimpleCoffee implements Coffee {
    public String getDescription() {
        return "Simple Coffee";
    }

    public double getCost() {
        return 5.0;
    }
}
------------------------------

3. Decorator Abstract Class
-------------------------------------------------------
public abstract class CoffeeDecorator implements Coffee {
    protected Coffee decoratedCoffee;

    public CoffeeDecorator(Coffee coffee) {
        this.decoratedCoffee = coffee;
    }

    public String getDescription() {
        return decoratedCoffee.getDescription();
    }

    public double getCost() {
        return decoratedCoffee.getCost();
    }
}
------------------------------------------------------

4. Concrete Decorators
------------------------------------------------------
public class MilkDecorator extends CoffeeDecorator {
    public MilkDecorator(Coffee coffee) {
        super(coffee);
    }

    public String getDescription() {
        return decoratedCoffee.getDescription() + ", Milk";
    }

    public double getCost() {
        return decoratedCoffee.getCost() + 1.5;
    }
}

public class SugarDecorator extends CoffeeDecorator {
    public SugarDecorator(Coffee coffee) {
        super(coffee);
    }

    public String getDescription() {
        return decoratedCoffee.getDescription() + ", Sugar";
    }

    public double getCost() {
        return decoratedCoffee.getCost() + 0.5;
    }
}
---------------------------------------------------------

5. Client Code (Usage)
--------------------------------------------------
public class Main {
    public static void main(String[] args) {
        Coffee coffee = new SimpleCoffee();
        System.out.println(coffee.getDescription() + " $" + coffee.getCost());

        coffee = new MilkDecorator(coffee);
        System.out.println(coffee.getDescription() + " $" + coffee.getCost());

        coffee = new SugarDecorator(coffee);
        System.out.println(coffee.getDescription() + " $" + coffee.getCost());
    }
}
----------------------------------------------------

‚ù§Ô∏èUse Cases for the Decorator Pattern
----------------------------------------------------
Extending Functionality: When you have a base component with basic functionality, but you need to add additional features or 
behaviors to it dynamically without altering its structure. Decorators allow you to add new responsibilities to objects at runtime.

Multiple Combinations of Features: When you want to provide multiple combinations of features or options to an object. 
Decorators can be stacked and combined in different ways to create customized variations of objects, providing flexibility to users.

Legacy Code Integration: When working with legacy code or third-party libraries where modifying the existing codebase is not 
feasible or desirable, decorators can be used to extend the functionality of existing objects without altering their implementation.

GUI Components: In graphical user interface (GUI) development, decorators can be used to add additional visual effects, such as 
borders, shadows, or animations, to GUI components like buttons, panels, or windows.

Input/Output Streams: Decorators are commonly used in input/output stream classes in languages like Java. They allow you to wrap 
streams with additional functionality such as buffering, compression, encryption, or logging without modifying the original stream 
classes.

‚úÖAdvantages of the Decorator Design Pattern
------------------------------------------------------
Open-Closed Principle: The decorator pattern follows the open-closed principle, which states that classes should 
be open for extension but closed for modification. This means you can introduce new functionality to an existing 
class without changing its source code.

Flexibility: It allows you to add or remove responsibilities (i.e., behaviors) from objects at runtime. This flexibility 
makes it easy to create complex object structures with varying combinations of behaviors.

Reusable Code: Decorators are reusable components. You can create a library of decorator classes and apply them to different
objects and classes as needed, reducing code duplication.

Composition over Inheritance: Unlike traditional inheritance, which can lead to a deep and inflexible class hierarchy, the
decorator pattern uses composition. You can compose objects with different decorators to achieve the desired functionality, 
avoiding the drawbacks of inheritance, such as tight coupling and rigid hierarchies.

Dynamic Behavior Modification: Decorators can be applied or removed at runtime, providing dynamic behavior modification for
objects. This is particularly useful when you need to adapt an object's behavior based on changing requirements or user preferences.

Clear Code Structure: The Decorator pattern promotes a clear and structured design, making it easier for developers to understand
how different features and responsibilities are added to objects.


‚ùåDisadvantages of the Decorator Design Pattern
------------------------------------------------
Complexity: As you add more decorators to an object, the code can become more complex and harder to understand. The nesting of
decorators can make the codebase difficult to navigate and debug, especially when there are many decorators involved.

Increased Number of Classes: When using the Decorator pattern, you often end up with a large number of small, specialized decorator
classes. This can lead to a proliferation of classes in your codebase, which may increase maintenance overhead.

Order of Decoration: The order in which decorators are applied can affect the final behavior of the object. If decorators are not
applied in the correct order, it can lead to unexpected results. Managing the order of decorators can be challenging, 
especially in complex scenarios.

Potential for Overuse: Because it's easy to add decorators to objects, there is a risk of overusing the Decorator pattern,
making the codebase unnecessarily complex. It's important to use decorators judiciously and only when they genuinely add
value to the design.

Limited Support in Some Languages: Some programming languages may not provide convenient support for implementing decorators.
Implementing the pattern can be more verbose and less intuitive in such languages.

