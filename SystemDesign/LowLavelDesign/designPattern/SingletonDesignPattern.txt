The Singleton Method Design Pattern ensures a class has only one instance and provides a global
access point to it. It’s ideal for scenarios requiring centralized control, like managing database 
connections or configuration settings. This article explores its principles, benefits, drawbacks, 
and best use cases in software development.

🎯 Intent
Ensure that a class has only one instance and provide a global access point to it.

✅ Use Cases
->  Logger
->  Configuration manager
->  Database connection pool
->  Thread pools
->  Caches

🔧 Key Features
->  Private constructor
->  Static instance of the class
->  Public static method to access the instance

🟢Singleton Design Pattern Principles
------------------------------------------------
->  Single Instance: Singleton ensures that only one instance of the class exists throughout the application.
->  Global Access: Provide a global point of access to that instance.
->  Lazy or Eager Initialization: Support creating the instance either when needed (lazy) or when the class is loaded (eager).
->  Thread Safety: Implement mechanisms to prevent multiple threads from creating separate instances simultaneously.
->  Private Constructor: Restrict direct instantiation by making the constructor private, forcing the use of the access point.

🟢Initialization Types of Singleton
------------------------------------------------
Singleton class can be instantiated by two methods:

Early initialization : 
   In this method, class is initialized whether it is to be used or not. The main advantage of this method is its simplicity.
   You initiate the class at the time of class loading. Its drawback is that class is always initialized whether it is being used or not.
Lazy initialization : 
   In this method, class in initialized only when it is required. It can save you from instantiating 
   the class when you don't need it. Generally, lazy initialization is used when we create a singleton class.

🟢Example: Logger (Singleton)

✅ Basic Thread-Safe Singleton
-------------------------------------------------
public class Logger {
    private static Logger instance;

    // Private constructor to prevent instantiation
    private Logger() {
        System.out.println("Logger initialized");
    }

    // Public accessor method (thread-safe)
    public static synchronized Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }

    public void log(String message) {
        System.out.println("LOG: " + message);
    }
}
------------------------------------------------------

👨‍💻 Client Code
------------------------------------------------------
public class Main {
    public static void main(String[] args) {
        Logger logger1 = Logger.getInstance();
        Logger logger2 = Logger.getInstance();

        logger1.log("Application started");
        logger2.log("Another log");

        System.out.println(logger1 == logger2); // true
    }
}
------------------------------------------------------

🔒 Thread-Safe Singleton with Double-Checked Locking (Better Performance)
--------------------------------------------------------------------------
public class Logger {
    private static volatile Logger instance;

    private Logger() {}

    public static Logger getInstance() {
        if (instance == null) {
            synchronized (Logger.class) {
                if (instance == null) {
                    instance = new Logger();
                }
            }
        }
        return instance;
    }

    public void log(String msg) {
        System.out.println("LOG: " + msg);
    }
}
----------------------------------------------------------------------------

🧊 Eager Initialization (Simple but not Lazy)
---------------------------------------------------------------------------
public class Logger {
    private static final Logger instance = new Logger();

    private Logger() {}

    public static Logger getInstance() {
        return instance;
    }
}
---------------------------------------------------------------------------

🟢Use Cases for the Singleton Design Pattern
------------------------------------------------------
->  In applications where creating and managing database connections is resource-heavy, using a Singleton ensures 
    that there’s just one connection maintained throughout the application.
->  When global settings need to be accessed by different parts of the application, a Singleton configuration manager
    provides a single point of access for these settings.
->  Singleton helps to centralize control and making it easier to manage the state and actions of user interface components.
->  Singleton can effectively organize print jobs and streamlines the process in the systems where document printing is required.


✅Advantages of the Singleton Design Pattern
------------------------------------------------------
->  The Singleton pattern guarantees that there’s only one instance with a unique identifier, which helps prevent naming issues.
->  This pattern supports both eager initialization (creating the instance when the class is loaded) and lazy 
    initialization (creating it when it’s first needed), providing adaptability based on the use case.
->  When implemented correctly, a Singleton can be thread-safe, ensuring that multiple threads don’t accidentally create
    duplicate instances.
->  By keeping just one instance, the Singleton pattern can help lower memory usage in applications where resources are limited.

❌Disadvantages of the Singleton Design Pattern
------------------------------------------------------  
->  Singletons can make unit testing difficult since they introduce a global state. This can complicate testing components
    that depend on a Singleton, as its state can influence the test results.
->  In multi-threaded environments, the process of creating and initializing a Singleton can lead to race conditions if multiple
    threads try to create it simultaneously.
->  If you later find that you need multiple instances or want to modify how instances are created, it can require significant
    code changes.
->  The Singleton pattern creates a global dependency, which can complicate replacing the Singleton with a different implementation 
    or using dependency injection.
->  Subclassing a Singleton can be tricky since the constructor is usually private. This requires careful handling and may not fit
    standard inheritance practices.


